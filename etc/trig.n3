@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix trig: <http://www.w3.org/ns/formats/TriG#>.
@prefix : <http://www.w3.org/ns/formats/TriG#>.
@prefix re: <http://www.w3.org/2000/10/swap/grammar/regex#>.
@prefix g: <http://www.w3.org/2000/10/swap/grammar/ebnf#>.

:language rdfs:isDefinedBy <>; g:start :trigDoc.

:trigDoc rdfs:label "trigDoc"; rdf:value "1g";
  rdfs:comment "[1g] trigDoc ::= (graph_statement)*";
  g:star 
    :graph_statement .

:graph_statement rdfs:label "graph_statement"; rdf:value "2g";
  rdfs:comment "[2g] graph_statement ::= directive \".\" | graph";
  g:alt (
    [ g:seq (
      :directive
      "."
     ) ]
    :graph
   ) .

:graph rdfs:label "graph"; rdf:value "3g";
  rdfs:comment "[3g] graph ::= graphIri? \"{\" (triples \".\")* \"}\\\"";
  g:seq (
    [ g:opt 
      :graphIri
      ]
    "{"
    [ g:star 
      [ g:seq (
        :triples
        "."
       ) ]
      ]
    "}"
   ) .

:graphIri rdfs:label "graphIri"; rdf:value "4g";
  rdfs:comment "[4g] graphIri ::= IRIref";
  g:seq ( :IRIref ) .

:directive rdfs:label "directive"; rdf:value "3";
  rdfs:comment "[3] directive ::= prefixID | base | sparqlPrefix | sparqlBase";
  g:alt (
    :prefixID
    :base
    :sparqlPrefix
    :sparqlBase
   ) .

:prefixID rdfs:label "prefixID"; rdf:value "4";
  rdfs:comment "[4] prefixID ::= '@prefix' PNAME_NS IRIREF \".\\\"";
  g:seq (
    "@prefix"
    :PNAME_NS
    :IRIREF
    "."
   ) .

:base rdfs:label "base"; rdf:value "5";
  rdfs:comment "[5] base ::= '@base' IRIREF \".\\\"";
  g:seq (
    "@base"
    :IRIREF
    "."
   ) .

:sparqlPrefix rdfs:label "sparqlPrefix"; rdf:value "28s";
  rdfs:comment "[28s] sparqlPrefix ::= SPARQL_PREFIX PNAME_NS IRIREF";
  g:seq (
    :SPARQL_PREFIX
    :PNAME_NS
    :IRIREF
   ) .

:sparqlBase rdfs:label "sparqlBase"; rdf:value "29s";
  rdfs:comment "[29s] sparqlBase ::= SPARQL_BASE IRIREF";
  g:seq (
    :SPARQL_BASE
    :IRIREF
   ) .

:triples rdfs:label "triples"; rdf:value "6";
  rdfs:comment "[6] triples ::= subject predicateObjectList| blankNodePropertyList predicateObjectList?";
  g:alt (
    [ g:seq (
      :subject
      :predicateObjectList
     ) ]
    [ g:seq (
      :blankNodePropertyList
      [ g:opt 
        :predicateObjectList
        ]
     ) ]
   ) .

:predicateObjectList rdfs:label "predicateObjectList"; rdf:value "7";
  rdfs:comment "[7] predicateObjectList ::= verb objectList ( \";\" ( verb objectList)? )*";
  g:seq (
    :verb
    :objectList
    [ g:star 
      [ g:seq (
        ";"
        [ g:opt 
          [ g:seq (
            :verb
            :objectList
           ) ]
          ]
       ) ]
      ]
   ) .

:objectList rdfs:label "objectList"; rdf:value "8";
  rdfs:comment "[8] objectList ::= object ( \",\" object )*";
  g:seq (
    :object
    [ g:star 
      [ g:seq (
        ","
        :object
       ) ]
      ]
   ) .

:verb rdfs:label "verb"; rdf:value "9";
  rdfs:comment "[9] verb ::= predicate | \"a\\\"";
  g:alt (
    :predicate
    "a"
   ) .

:subject rdfs:label "subject"; rdf:value "10";
  rdfs:comment "[10] subject ::= iri | blank";
  g:alt (
    :iri
    :blank
   ) .

:predicate rdfs:label "predicate"; rdf:value "11";
  rdfs:comment "[11] predicate ::= iri";
  g:seq ( :iri ) .

:object rdfs:label "object"; rdf:value "12";
  rdfs:comment "[12] object ::= iri | blank | blankNodePropertyList| literal";
  g:alt (
    :iri
    :blank
    :blankNodePropertyList
    :literal
   ) .

:literal rdfs:label "literal"; rdf:value "13";
  rdfs:comment "[13] literal ::= RDFLiteral | NumericLiteral | BooleanLiteral";
  g:alt (
    :RDFLiteral
    :NumericLiteral
    :BooleanLiteral
   ) .

:blank rdfs:label "blank"; rdf:value "14";
  rdfs:comment "[14] blank ::= BlankNode | collection";
  g:alt (
    :BlankNode
    :collection
   ) .

:blankNodePropertyList rdfs:label "blankNodePropertyList"; rdf:value "15";
  rdfs:comment "[15] blankNodePropertyList ::= \"[\" predicateObjectList \"]\\\"";
  g:seq (
    "["
    :predicateObjectList
    "]"
   ) .

:collection rdfs:label "collection"; rdf:value "16";
  rdfs:comment "[16] collection ::= \"(\" object* \")\\\"";
  g:seq (
    "("
    [ g:star 
      :object
      ]
    ")"
   ) .

:NumericLiteral rdfs:label "NumericLiteral"; rdf:value "17";
  rdfs:comment "[17] NumericLiteral ::= INTEGER | DECIMAL | DOUBLE";
  g:alt (
    :INTEGER
    :DECIMAL
    :DOUBLE
   ) .

:RDFLiteral rdfs:label "RDFLiteral"; rdf:value "128s";
  rdfs:comment "[128s] RDFLiteral ::= String ( LANGTAG | ( \"^^\" iri ) )?";
  g:seq (
    :String
    [ g:opt 
      [ g:alt (
        :LANGTAG
        [ g:seq (
          "^^"
          :iri
         ) ]
       ) ]
      ]
   ) .

:BooleanLiteral rdfs:label "BooleanLiteral"; rdf:value "133s";
  rdfs:comment "[133s] BooleanLiteral ::= \"true\" | \"false\\\"";
  g:alt (
    "true"
    "false"
   ) .

:String rdfs:label "String"; rdf:value "18";
  rdfs:comment "[18] String ::= STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE";
  g:alt (
    :STRING_LITERAL_QUOTE
    :STRING_LITERAL_SINGLE_QUOTE
    :STRING_LITERAL_LONG_SINGLE_QUOTE
    :STRING_LITERAL_LONG_QUOTE
   ) .

:iri rdfs:label "iri"; rdf:value "135s";
  rdfs:comment "[135s] iri ::= IRIREF | PrefixedName";
  g:alt (
    :IRIREF
    :PrefixedName
   ) .

:PrefixedName rdfs:label "PrefixedName"; rdf:value "136s";
  rdfs:comment "[136s] PrefixedName ::= PNAME_LN | PNAME_NS";
  g:alt (
    :PNAME_LN
    :PNAME_NS
   ) .

:BlankNode rdfs:label "BlankNode"; rdf:value "137s";
  rdfs:comment "[137s] BlankNode ::= BLANK_NODE_LABEL | ANON";
  g:alt (
    :BLANK_NODE_LABEL
    :ANON
   ) .

:SPARQL_PREFIX rdfs:label "SPARQL_PREFIX"; rdf:value "28t";
  rdfs:comment "[28t] SPARQL_PREFIX ::= [Pp][Rr][Ee][Ff][Ii][Xx]";
  re:seq (
    [  re:matches "[Pp]"  ]
    [  re:matches "[Rr]"  ]
    [  re:matches "[Ee]"  ]
    [  re:matches "[Ff]"  ]
    [  re:matches "[Ii]"  ]
    [  re:matches "[Xx]"  ]
   ) .

:SPARQL_BASE rdfs:label "SPARQL_BASE"; rdf:value "29t";
  rdfs:comment "[29t] SPARQL_BASE ::= [Bb][Aa][Ss][Ee]";
  re:seq (
    [  re:matches "[Bb]"  ]
    [  re:matches "[Aa]"  ]
    [  re:matches "[Ss]"  ]
    [  re:matches "[Ee]"  ]
   ) .

:IRIREF rdfs:label "IRIREF"; rdf:value "19";
  rdfs:comment "[19] IRIREF ::=  '<' ([^#x00-#x20<>\"{}|^`\\] | UCHAR)* '>'";
  re:seq (
    "<"
    [ re:star 
      [ re:alt (
        [  re:matches "[^\\u0000-\\u0020<>\"{}|^`\\]"  ]
        :UCHAR
       ) ]
      ]
    ">"
   ) .

:PNAME_NS rdfs:label "PNAME_NS"; rdf:value "139s";
  rdfs:comment "[139s] PNAME_NS ::= PN_PREFIX? \":\\\"";
  re:seq (
    [ re:opt 
      :PN_PREFIX
      ]
    ":"
   ) .

:PNAME_LN rdfs:label "PNAME_LN"; rdf:value "140s";
  rdfs:comment "[140s] PNAME_LN ::= PNAME_NS PN_LOCAL";
  re:seq (
    :PNAME_NS
    :PN_LOCAL
   ) .

:BLANK_NODE_LABEL rdfs:label "BLANK_NODE_LABEL"; rdf:value "141s";
  rdfs:comment "[141s] BLANK_NODE_LABEL ::= '_:' ( PN_CHARS_U | [0-9] ) ((PN_CHARS|'.')* PN_CHARS)?";
  re:seq (
    "_:"
    [ re:alt (
      :PN_CHARS_U
      [  re:matches "[0-9]"  ]
     ) ]
    [ re:opt 
      [ re:seq (
        [ re:star 
          [ re:alt (
            :PN_CHARS
            "."
           ) ]
          ]
        :PN_CHARS
       ) ]
      ]
   ) .

:LANGTAG rdfs:label "LANGTAG"; rdf:value "144s";
  rdfs:comment "[144s] LANGTAG ::= \"@\" [a-zA-Z]+ ( \"-\" [a-zA-Z0-9]+ )*";
  re:seq (
    "@"
    [ re:plus 
      [  re:matches "[a-zA-Z]"  ]
      ]
    [ re:star 
      [ re:seq (
        "-"
        [ re:plus 
          [  re:matches "[a-zA-Z0-9]"  ]
          ]
       ) ]
      ]
   ) .

:INTEGER rdfs:label "INTEGER"; rdf:value "20";
  rdfs:comment "[20] INTEGER ::= [+-]? [0-9]+";
  re:seq (
    [ re:opt 
      [  re:matches "[+-]"  ]
      ]
    [ re:plus 
      [  re:matches "[0-9]"  ]
      ]
   ) .

:DECIMAL rdfs:label "DECIMAL"; rdf:value "21";
  rdfs:comment "[21] DECIMAL ::= [+-]?  ( ([0-9])* '.' ([0-9])+  )";
  re:seq (
    [ re:opt 
      [  re:matches "[+-]"  ]
      ]
    [ re:seq (
      [ re:star 
        [  re:matches "[0-9]"  ]
        ]
      "."
      [ re:plus 
        [  re:matches "[0-9]"  ]
        ]
     ) ]
   ) .

:DOUBLE rdfs:label "DOUBLE"; rdf:value "22";
  rdfs:comment "[22] DOUBLE ::= [+-]? ( [0-9]+ '.' [0-9]* EXPONENT | '.' ([0-9])+ EXPONENT | ([0-9])+ EXPONENT )";
  re:seq (
    [ re:opt 
      [  re:matches "[+-]"  ]
      ]
    [ re:alt (
      [ re:seq (
        [ re:plus 
          [  re:matches "[0-9]"  ]
          ]
        "."
        [ re:star 
          [  re:matches "[0-9]"  ]
          ]
        :EXPONENT
       ) ]
      [ re:seq (
        "."
        [ re:plus 
          [  re:matches "[0-9]"  ]
          ]
        :EXPONENT
       ) ]
      [ re:seq (
        [ re:plus 
          [  re:matches "[0-9]"  ]
          ]
        :EXPONENT
       ) ]
     ) ]
   ) .

:EXPONENT rdfs:label "EXPONENT"; rdf:value "154s";
  rdfs:comment "[154s] EXPONENT ::= [eE] [+-]? [0-9]+";
  re:seq (
    [  re:matches "[eE]"  ]
    [ re:opt 
      [  re:matches "[+-]"  ]
      ]
    [ re:plus 
      [  re:matches "[0-9]"  ]
      ]
   ) .

:STRING_LITERAL_QUOTE rdfs:label "STRING_LITERAL_QUOTE"; rdf:value "23";
  rdfs:comment "[23] STRING_LITERAL_QUOTE ::= '\"' ( [^#x22#x5C#xA#xD] | ECHAR | UCHAR )* '\"'";
  re:seq (
    "\""
    [ re:star 
      [ re:alt (
        [  re:matches "[^\\u0022\\u005C\\u000A\\u000D]"  ]
        :ECHAR
        :UCHAR
       ) ]
      ]
    "\""
   ) .

:STRING_LITERAL_SINGLE_QUOTE rdfs:label "STRING_LITERAL_SINGLE_QUOTE"; rdf:value "24";
  rdfs:comment "[24] STRING_LITERAL_SINGLE_QUOTE ::= \"'\" ( [^#x27#x5C#xA#xD] | ECHAR | UCHAR )* \"'\\\"";
  re:seq (
    "'"
    [ re:star 
      [ re:alt (
        [  re:matches "[^\\u0027\\u005C\\u000A\\u000D]"  ]
        :ECHAR
        :UCHAR
       ) ]
      ]
    "'"
   ) .

:STRING_LITERAL_LONG_SINGLE_QUOTE rdfs:label "STRING_LITERAL_LONG_SINGLE_QUOTE"; rdf:value "25";
  rdfs:comment "[25] STRING_LITERAL_LONG_SINGLE_QUOTE ::= \"'''\" ( ( \"'\" | \"''\" )? ( [^'\\] | ECHAR | UCHAR ) )* \"'''\\\"";
  re:seq (
    "'''"
    [ re:star 
      [ re:seq (
        [ re:opt 
          [ re:alt (
            "'"
            "''"
           ) ]
          ]
        [ re:alt (
          [  re:matches "[^'\\]"  ]
          :ECHAR
          :UCHAR
         ) ]
       ) ]
      ]
    "'''"
   ) .

:STRING_LITERAL_LONG_QUOTE rdfs:label "STRING_LITERAL_LONG_QUOTE"; rdf:value "26";
  rdfs:comment "[26] STRING_LITERAL_LONG_QUOTE ::= '\\\"\\\"\\\"' ( ( '\"' | '\"\"' )? ( [^\"\\] | ECHAR | UCHAR ) )* '\\\"\\\"\\\"'";
  re:seq (
    "\"\"\""
    [ re:star 
      [ re:seq (
        [ re:opt 
          [ re:alt (
            "\""
            "\"\""
           ) ]
          ]
        [ re:alt (
          [  re:matches "[^\"\\]"  ]
          :ECHAR
          :UCHAR
         ) ]
       ) ]
      ]
    "\"\"\""
   ) .

:UCHAR rdfs:label "UCHAR"; rdf:value "27";
  rdfs:comment "[27] UCHAR ::= ( \"\\u\" HEX HEX HEX HEX ) | ( \"\\U\" HEX HEX HEX HEX HEX HEX HEX HEX )";
  re:alt (
    [ re:seq (
      "\\u"
      :HEX
      :HEX
      :HEX
      :HEX
     ) ]
    [ re:seq (
      "\\U"
      :HEX
      :HEX
      :HEX
      :HEX
      :HEX
      :HEX
      :HEX
      :HEX
     ) ]
   ) .

:ECHAR rdfs:label "ECHAR"; rdf:value "159s";
  rdfs:comment "[159s] ECHAR ::= \"\\\" [tbnrf\\\"']";
  re:seq (
    "\\"
    [  re:matches "[tbnrf\\\"']"  ]
   ) .

:NIL rdfs:label "NIL"; rdf:value "160s";
  rdfs:comment "[160s] NIL ::= \"(\" WS* \")\\\"";
  re:seq (
    "("
    [ re:star 
      :WS
      ]
    ")"
   ) .

:WS rdfs:label "WS"; rdf:value "161s";
  rdfs:comment "[161s] WS ::= #x20 | #x9 | #xD | #xA";
  re:alt (
    [  re:matches "[\\u0020]"  ]
    [  re:matches "[\\u0009]"  ]
    [  re:matches "[\\u000D]"  ]
    [  re:matches "[\\u000A]"  ]
   ) .

:ANON rdfs:label "ANON"; rdf:value "162s";
  rdfs:comment "[162s] ANON ::= \"[\" WS* \"]\\\"";
  re:seq (
    "["
    [ re:star 
      :WS
      ]
    "]"
   ) .

:PN_CHARS_BASE rdfs:label "PN_CHARS_BASE"; rdf:value "163s";
  rdfs:comment "[163s] PN_CHARS_BASE ::= [A-Z] | [a-z] | [#00C0-#00D6] | [#00D8-#00F6] | [#00F8-#02FF] | [#0370-#037D] | [#037F-#1FFF] | [#200C-#200D] | [#2070-#218F] | [#2C00-#2FEF] | [#3001-#D7FF] | [#F900-#FDCF] | [#FDF0-#FFFD] | [#10000-#EFFFF]";
  re:alt (
    [  re:matches "[A-Z]"  ]
    [  re:matches "[a-z]"  ]
    [  re:matches "[#00C0-#00D6]"  ]
    [  re:matches "[#00D8-#00F6]"  ]
    [  re:matches "[#00F8-#02FF]"  ]
    [  re:matches "[#0370-#037D]"  ]
    [  re:matches "[#037F-#1FFF]"  ]
    [  re:matches "[#200C-#200D]"  ]
    [  re:matches "[#2070-#218F]"  ]
    [  re:matches "[#2C00-#2FEF]"  ]
    [  re:matches "[#3001-#D7FF]"  ]
    [  re:matches "[#F900-#FDCF]"  ]
    [  re:matches "[#FDF0-#FFFD]"  ]
    [  re:matches "[#10000-#EFFFF]"  ]
   ) .

:PN_CHARS_U rdfs:label "PN_CHARS_U"; rdf:value "164s";
  rdfs:comment "[164s] PN_CHARS_U  ::=  PN_CHARS_BASE | '_'";
  re:alt (
    :PN_CHARS_BASE
    "_"
   ) .

:PN_CHARS rdfs:label "PN_CHARS"; rdf:value "166s";
  rdfs:comment "[166s] PN_CHARS ::= PN_CHARS_U | \"-\" | [0-9] | #00B7 | [#0300-#036F] | [#203F-#2040]";
  re:alt (
    :PN_CHARS_U
    "-"
    [  re:matches "[0-9]"  ]
    [  re:matches "[#00B7]"  ]
    [  re:matches "[#0300-#036F]"  ]
    [  re:matches "[#203F-#2040]"  ]
   ) .

:PN_PREFIX rdfs:label "PN_PREFIX"; rdf:value "167s";
  rdfs:comment "[167s] PN_PREFIX ::= PN_CHARS_BASE ( ( PN_CHARS | \".\" )* PN_CHARS )?";
  re:seq (
    :PN_CHARS_BASE
    [ re:opt 
      [ re:seq (
        [ re:star 
          [ re:alt (
            :PN_CHARS
            "."
           ) ]
          ]
        :PN_CHARS
       ) ]
      ]
   ) .

:PN_LOCAL rdfs:label "PN_LOCAL"; rdf:value "168s";
  rdfs:comment "[168s] PN_LOCAL ::= ( PN_CHARS_U | ':' | [0-9] | PLX ) ( ( PN_CHARS | '.' | ':' | PLX )*  ( PN_CHARS | ':' | PLX ) ) ?";
  re:seq (
    [ re:alt (
      :PN_CHARS_U
      ":"
      [  re:matches "[0-9]"  ]
      :PLX
     ) ]
    [ re:opt 
      [ re:seq (
        [ re:star 
          [ re:alt (
            :PN_CHARS
            "."
            ":"
            :PLX
           ) ]
          ]
        [ re:alt (
          :PN_CHARS
          ":"
          :PLX
         ) ]
       ) ]
      ]
   ) .

:PLX rdfs:label "PLX"; rdf:value "169s";
  rdfs:comment "[169s] PLX ::= PERCENT | PN_LOCAL_ESC";
  re:alt (
    :PERCENT
    :PN_LOCAL_ESC
   ) .

:PERCENT rdfs:label "PERCENT"; rdf:value "170s";
  rdfs:comment "[170s] PERCENT ::= '%' HEX HEX";
  re:seq (
    "%"
    :HEX
    :HEX
   ) .

:HEX rdfs:label "HEX"; rdf:value "171s";
  rdfs:comment "[171s] HEX ::= [0-9] | [A-F] | [a-f]";
  re:alt (
    [  re:matches "[0-9]"  ]
    [  re:matches "[A-F]"  ]
    [  re:matches "[a-f]"  ]
   ) .

:PN_LOCAL_ESC rdfs:label "PN_LOCAL_ESC"; rdf:value "172s";
  rdfs:comment "[172s] PN_LOCAL_ESC ::= '\\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | \"'\" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%' )";
  re:seq (
    "\\"
    [ re:alt (
      "_"
      "~"
      "."
      "-"
      "!"
      "$"
      "&"
      "'"
      "("
      ")"
      "*"
      "+"
      ","
      ";"
      "="
      "/"
      "?"
      "#"
      "@"
      "%"
     ) ]
   ) .
