(
 (rule _empty "0" (seq))
 (rule trigDoc "1g" (alt _empty _trigDoc_2))
 (rule _trigDoc_2 "1g.2" (seq _trigDoc_1 trigDoc))
 (rule _trigDoc_1 "1g.1" (alt directive block))
 (terminal GRAPH "1t" (seq (range "Gg") (range "Rr") (range "Aa") (range "Pp") (range "Hh")))
 (rule _block_1 "2g.1" (seq GRAPH labelOrSubject wrappedGraph))
 (rule block "2g" (alt triplesOrGraph wrappedGraph triples2 _block_1))
 (rule _triplesOrGraph_2 "3g.2" (seq predicateObjectList "."))
 (rule _triplesOrGraph_1 "3g.1" (alt wrappedGraph _triplesOrGraph_2))
 (rule triplesOrGraph "3g" (seq labelOrSubject _triplesOrGraph_1))
 (rule directive "3" (alt prefixID base))
 (rule _triples2_2 "4g.2" (alt _empty predicateObjectList))
 (rule prefixID "4" (seq PREFIX PNAME_NS IRIREF _prefixID_1))
 (rule _triples2_1 "4g.1" (alt blankNodePropertyList collection))
 (rule triples2 "4g" (seq _triples2_1 _triples2_2 "."))
 (rule _prefixID_1 "4.1" (alt _empty "."))
 (rule _wrappedGraph_1 "5g.1" (alt _empty triplesBlock))
 (rule wrappedGraph "5g" (seq "{" _wrappedGraph_1 "}"))
 (rule base "5" (seq BASE IRIREF _base_1))
 (rule _base_1 "5.1" (alt _empty "."))
 (rule _triplesBlock_1 "6g.1" (alt _empty _triplesBlock_2))
 (rule _triplesBlock_2 "6g.2" (seq "." _triplesBlock_3))
 (rule _triplesBlock_3 "6g.3" (alt _empty triplesBlock))
 (rule triples "6" (alt _triples_1 _triples_2))
 (rule triplesBlock "6g" (seq triples _triplesBlock_1))
 (rule _triples_1 "6.1" (seq subject predicateObjectList))
 (rule _triples_2 "6.2" (seq blankNodePropertyList _triples_3))
 (rule _triples_3 "6.3" (alt _empty predicateObjectList))
 (rule predicateObjectList "7" (seq verb objectList _predicateObjectList_1))
 (rule labelOrSubject "7g" (alt iri BlankNode))
 (rule _predicateObjectList_1 "7.1" (alt _empty _predicateObjectList_3))
 (rule _predicateObjectList_2 "7.2" (seq ";" _predicateObjectList_4))
 (rule _predicateObjectList_3 "7.3"
  (seq _predicateObjectList_2 _predicateObjectList_1))
 (rule _predicateObjectList_4 "7.4" (alt _empty _predicateObjectList_5))
 (rule _predicateObjectList_5 "7.5" (seq verb objectList))
 (rule objectList "8" (seq object _objectList_1))
 (rule _objectList_1 "8.1" (alt _empty _objectList_3))
 (rule _objectList_2 "8.2" (seq "," object))
 (rule _objectList_3 "8.3" (seq _objectList_2 _objectList_1))
 (rule verb "9" (alt predicate "a"))
 (rule subject "10" (alt iri blank))
 (rule predicate "11" (seq iri))
 (rule object "12" (alt iri blank blankNodePropertyList literal))
 (rule literal "13" (alt RDFLiteral NumericLiteral BooleanLiteral))
 (rule blank "14" (alt BlankNode collection))
 (rule blankNodePropertyList "15" (seq "[" predicateObjectList "]"))
 (rule collection "16" (seq "(" _collection_1 ")"))
 (rule _collection_1 "16.1" (alt _empty _collection_2))
 (rule _collection_2 "16.2" (seq object _collection_1))
 (rule NumericLiteral "17" (alt INTEGER DECIMAL DOUBLE))
 (rule String "18"
  (alt STRING_LITERAL_QUOTE STRING_LITERAL_SINGLE_QUOTE
   STRING_LITERAL_LONG_SINGLE_QUOTE STRING_LITERAL_LONG_QUOTE ))
 (terminal IRIREF "19" (seq "<" (star (alt (range "^#x00-#x20<>\"{}|^`\\") UCHAR)) ">"))
 (terminal INTEGER "20" (seq (opt (range "+-")) (plus (range "0-9"))))
 (terminal DECIMAL "21"
  (seq (opt (range "+-")) (seq (star (range "0-9")) "." (plus (range "0-9")))))
 (terminal DOUBLE "22"
  (seq
   (opt (range "+-"))
   (alt
    (seq (plus (range "0-9")) "." (star (range "0-9")) EXPONENT)
    (seq "." (plus (range "0-9")) EXPONENT)
    (seq (plus (range "0-9")) EXPONENT)) ))
 (terminal STRING_LITERAL_QUOTE "23"
  (seq "\"" (star (alt (range "^#x22#x5C#xA#xD") ECHAR UCHAR)) "\""))
 (terminal STRING_LITERAL_SINGLE_QUOTE "24"
  (seq "'" (star (alt (range "^#x27#x5C#xA#xD") ECHAR UCHAR)) "'"))
 (terminal STRING_LITERAL_LONG_SINGLE_QUOTE "25"
  (seq "'''" (star (seq (opt (alt "'" "''")) (alt (range "^'\\") ECHAR UCHAR))) "'''"))
 (terminal STRING_LITERAL_LONG_QUOTE "26"
  (seq "\"\"\"" (star (seq (opt (alt "\"" "\"\"")) (alt (range "^\"\\") ECHAR UCHAR))) "\"\"\""))
 (terminal UCHAR "27"
  (alt (seq "\\u" HEX HEX HEX HEX) (seq "\\U" HEX HEX HEX HEX HEX HEX HEX HEX)))
 (terminal PREFIX "28t"
  (seq (opt "@") (range "Pp") (range "Rr") (range "Ee") (range "Ff") (range "Ii") (range "Xx")))
 (terminal BASE "29t" (seq (opt "@") (range "Bb") (range "Aa") (range "Ss") (range "Ee")))
 (rule RDFLiteral "128s" (seq String _RDFLiteral_1))
 (rule _RDFLiteral_1 "128s.1" (alt _empty _RDFLiteral_2))
 (rule _RDFLiteral_3 "128s.3" (seq "^^" iri))
 (rule _RDFLiteral_2 "128s.2" (alt LANGTAG _RDFLiteral_3))
 (rule BooleanLiteral "133s" (alt "true" "false"))
 (rule iri "135s" (alt IRIREF PrefixedName))
 (rule PrefixedName "136s" (alt PNAME_LN PNAME_NS))
 (rule BlankNode "137s" (alt BLANK_NODE_LABEL ANON))
 (terminal PNAME_NS "139s" (seq (opt PN_PREFIX) ":"))
 (terminal PNAME_LN "140s" (seq PNAME_NS PN_LOCAL))
 (terminal BLANK_NODE_LABEL "141s"
  (seq "_:" (alt PN_CHARS_U (range "0-9")) (opt (seq (star (alt PN_CHARS ".")) PN_CHARS))))
 (terminal LANGTAG "144s"
  (seq "@" (plus (range "a-zA-Z")) (star (seq "-" (plus (range "a-zA-Z0-9"))))))
 (terminal EXPONENT "154s" (seq (range "eE") (opt (range "+-")) (plus (range "0-9"))))
 (terminal ECHAR "159s" (seq "\\" (range "tbnrf\\\"'")))
 (terminal NIL "160s" (seq "(" (star WS) ")"))
 (terminal WS "161s" (alt (hex "#x20") (hex "#x9") (hex "#xD") (hex "#xA")))
 (terminal ANON "162s" (seq "[" (star WS) "]"))
 (terminal PN_CHARS_BASE "163s"
  (alt
   (range "A-Z")
   (range "a-z")
   (range "#00C0-#00D6")
   (range "#00D8-#00F6")
   (range "#00F8-#02FF")
   (range "#0370-#037D")
   (range "#037F-#1FFF")
   (range "#200C-#200D")
   (range "#2070-#218F")
   (range "#2C00-#2FEF")
   (range "#3001-#D7FF")
   (range "#F900-#FDCF")
   (range "#FDF0-#FFFD")
   (range "#10000-#EFFFF")) )
 (terminal PN_CHARS_U "164s" (alt PN_CHARS_BASE "_"))
 (terminal PN_CHARS "166s"
  (alt PN_CHARS_U "-"
   (range "0-9")
   (hex "#00B7")
   (range "#0300-#036F")
   (range "#203F-#2040")) )
 (terminal PN_PREFIX "167s"
  (seq PN_CHARS_BASE (opt (seq (star (alt PN_CHARS ".")) PN_CHARS))))
 (terminal PN_LOCAL "168s"
  (seq
   (alt PN_CHARS_U ":" (range "0-9") PLX)
   (opt (seq (star (alt PN_CHARS "." ":" PLX)) (alt PN_CHARS ":" PLX)))) )
 (terminal PLX "169s" (alt PERCENT PN_LOCAL_ESC))
 (terminal PERCENT "170s" (seq "%" HEX HEX))
 (terminal HEX "171s" (alt (range "0-9") (range "A-F") (range "a-f")))
 (terminal PN_LOCAL_ESC "172s"
  (seq "\\"
   (alt "_" "~" "." "-" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" "/" "?" "#"
    "@" "%" )) ))
