#!/usr/bin/env ruby
# gramLL1 --- generator of parser tables for RDF::TriG::Reader
#     Based on:
#        http://www.w3.org/2000/10/swap/grammar/gramLL1.py
#
# Takes a Notaion3 file generated from original grammar with EBNF rules with
# reasoning to infer first/follow relationships between rules and generates
# Branch, First and Follow tables used directly by the LL1 parser.
#
# @author Gregg Kellogg
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require 'rdf/n3'
require 'getoptlong'

# Build rdf/turtle/reader/meta.rb from etc/turtle-bnf.n3

class EBNF < RDF::Vocabulary("http://www.w3.org/2000/10/swap/grammar/ebnf#"); end
class REGEX < RDF::Vocabulary("http://www.w3.org/2000/10/swap/grammar/regex#"); end

class GramLL1
  attr_accessor :graph
  attr_accessor :lang
  attr_accessor :errors
  attr_accessor :alt
  attr_accessor :seq
  attr_accessor :first
  attr_accessor :follow
  attr_accessor :branch
  attr_accessor :start
  attr_accessor :terminals
  attr_accessor :non_terminals
  
  def initialize(graph, lang, options = {})
    @options = options
    @graph = graph
    @lang = lang
    @lang_base = lang.to_s.sub(/([\/\#])[^\/\#]*$/, '\1')
    @already = []
    @agenda = []
    @errors = []
    @terminals = []
    @non_terminals = []
    @alt = {}
    @seq = {}
    
    @start = graph.first_object(:subject => lang, :predicate => EBNF.start)

    do_grammar

    @first = sets(EBNF['first'])
    @follow = sets(EBNF['follow'])
  end
  
  def run_production
    @branch = {}

    do_production(@start)
    while !@agenda.empty?
      x = @agenda.shift
      do_production(x)
    end

    if !@errors.empty?
      progress("###### FAILED with #{errors.length} errors.")
      @errors.each {|s| progress("  #{s}")}
      exit(-2)
    else
      progress("Ok for predictive parsing")
    end 
  end
  
  def outputTable(io, name, table, indent = 0)
    ind0 = '  ' * indent
    ind1 = ind0 + '  '
    ind2 = ind1 + '  '
    ind3 = ind2 + '  '
    
    if table.is_a?(Hash)
      io.puts "#{ind0}#{name} = {"
      table.keys.sort_by(&:to_s).each do |prod|
        case table[prod]
        when Array
          list = table[prod].map {|t| resource_rep(t).inspect}.join(",\n#{ind2}")
          io.puts "#{ind1}#{resource_rep(prod).inspect} => [\n#{ind2}#{list}],"
        when Hash
          io.puts "#{ind1}#{resource_rep(prod).inspect} => {"
          table[prod].keys.sort_by(&:to_s).each do |term|
            list = table[prod][term].map {|t2| resource_rep(t2).inspect}.join(", ")
            io.puts "#{ind2}#{resource_rep(term).inspect} => [#{list}],"
          end
          io.puts "#{ind1}},"
        else
          "Unknown table entry type: #{table[prod].class}"
        end
      end
      io.puts "#{ind0}}.freeze\n"
    else
      io.puts "#{ind0}#{name} = [\n#{ind1}" +
        table.sort.map {|prod| resource_rep(prod).inspect}.join(",\n#{ind1}") +
        "\n#{ind0}].freeze\n"
    end
  end

  private

  # Extract seq and alt for each production
  def do_grammar
    # Process non-terminals
    graph.query(:predicate => EBNF.nonTerminal, :object => lang) do |st|
      lhs = st.subject
      @non_terminals << lhs
      
      alt = graph.first_object(:subject => lhs, :predicate => EBNF.alt)
      seq = graph.first_object(:subject => lhs, :predicate => EBNF.seq)

      alt = alt ? RDF::List.new(alt, graph).to_a : []
      seq = seq ? RDF::List.new(seq, graph).to_a : []
      
      #chatty "r(#{lhs}) alt: #{alt}, seq: #{seq}"
      if alt.empty? && seq.empty?
        raise "no alt nor seq for #{lhs}"
      elsif !alt.empty? && !seq.empty?
        raise "both alt and seq for #{lhs}"
      elsif seq.empty?
        @alt[lhs] = alt
      else
        @seq[lhs] = seq
      end
    end
  end
  
  # get LL(1) first/follow sets
  def sets(pred)
    fi = {}
    query = RDF::Query.new(:lhs => { pred => :o })
    query.execute(graph).each do |solution|
      #chatty "sets(#{pred}) solution: #{solution.inspect}"
      lhs = solution[:lhs]
      o = solution[:o]
      next if o == EBNF.empty || o == EBNF.eps
      fi[lhs] ||= []
      fi[lhs] << o
    end
  
    fi
  end
  
  def do_production(lhs)
    if [EBNF.empty, EBNF.eps, EBNF.eof].include?(lhs)
      progress "Skip: #{resource_rep(lhs).inspect}"
      return
    elsif !@non_terminals.include?(lhs)
      progress("Terminal: #{resource_rep(lhs).inspect}")
      @terminals << lhs unless @terminals.include?(lhs)
      return
    end
    @already << lhs

    branchDict = {}

    rhs = graph.first_object(:subject => lhs, :predicate => REGEX.matches)
    if rhs
      chatty("Token #{lhs} matches regexp #{rhs}")

      if @first[lhs]
        @first[lhs].each {|statement| chatty("  First: #{statement.object}")}
      else
        recordError("No record of what token #{lhs} can start with")
      end
      return
    end

    progress("Production #{resource_rep(lhs).inspect}")
    if @options[:verbose]
      (@first[lhs] || []).each do |first|
        chatty("  First: '#{resource_rep(first)}'")
      end
      (@follow[lhs] || []).each do |follow|
        chatty("  Follow: '#{resource_rep(follow)}'")
      end
    end

    unless @alt[lhs] || @seq[lhs]
      recordError("No rules definition of #{lhs}")
      return
    end

    if @alt[lhs]
      # Add entries for each alternative, based on the alternative's first/seq
      @alt[lhs].each do |prod|
        chatty("  Alt: '#{resource_rep(prod)}'")
        @agenda << prod unless @already.include?(prod) || @agenda.include?(prod)
        if prod == EBNF.empty
          chatty "    ebnf:empty"
          branchDict[prod] = []
        elsif @first[prod].nil?
          chatty "    no first => #{prod}"
          branchDict[prod] = [prod]
        else
          (@first[prod] || []).each do |f|
            if branchDict.has_key?(f)
              recordError("Conflict: #{f} is also the condition for #{branchDict[f]}")
            end
            chatty "    alt[#{prod}] => #{prod}"
            branchDict[f] = [prod]
          end
        end
      end
    else
      chatty("  Seq: '#{@seq[lhs].map {|p| resource_rep(p)}.join(', ')}'")
      # Entries for each first element referencing the sequence
      (@first[lhs] || []).each do |f|
        branchDict[f] = @seq[lhs]
      end
      
      # Add each production to the agenda
      @seq[lhs].each do |prod|
        @agenda << prod unless @already.include?(prod) || @agenda.include?(prod)
      end
    end
  
    # Add follow rules
    (@follow[lhs] || []).each do |f|
      chatty("  Follow: #{resource_rep(f).inspect}")
      branchDict[f] ||= []
    end

    @branch[lhs] = branchDict
  end
  
  def resource_rep(value)
    if value.literal?
      value.to_s == "a" ? "a" : value.to_s
    elsif value.node?
      value.to_s.to_sym
    elsif value.start_with?(EBNF)
      "ebnf:#{value.fragment}".to_sym
    else
      value.fragment.to_s.to_sym
    end
  end

  def recordError(str)
    errors << str
    progress("##### ERROR:  #{str}")
  end

  def progress(str); puts(str); end
  def chatty(str); progress(str) if @options[:verbose]; end
end

options = {
  :verbose => false,
  :debug => false,
}
output = STDOUT
grammarFile = nil
lang = nil

opts = GetoptLong.new(
  ["--debug", GetoptLong::NO_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT],
  ["--grammar", GetoptLong::REQUIRED_ARGUMENT],
  ["--lang", GetoptLong::REQUIRED_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--help", "-?", GetoptLong::NO_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--verbose' then options[:verbose] = true
  when '--debug' then options[:debug] = true
  when '--grammar' then grammarFile = arg
  when '--lang' then lang = RDF::URI(arg)
  when '--output' then output = File.open(arg, "w")
  when '--help'
    puts %(Usage: build_meta --grammar=file --start=uri [--output=file]
        --debug         Debug output
        --verbose       Stay informed
        --grammar=file  This is the RDF augmented grammar
        --lang=uri      This is the URI of the language being processed
        --output=file   Where to save output
)
    exit(0)
  end
end

graph = RDF::Graph.load(grammarFile, :format => :n3)
g = GramLL1.new(graph, lang, options)
g.run_production

unless output == STDOUT
  output.puts "# This file is automatically generated by #{__FILE__}"
  output.puts "# BRANCH derived from #{grammarFile}"
  unless g.errors.empty?
    output.puts "# Note, tables completed with errors, may need to be resolved manually:"
    output.puts "#   #{pp.conflicts.map{|c| c.join("\n#      ")}.join("\n#   ")}"
  end
  output.puts "module RDF::TriG::Meta"
  output.puts "  START = :#{g.start.fragment}"
  output.puts
end
g.outputTable(output, 'BRANCH', g.branch, 1)
g.outputTable(output, 'TERMINALS', g.terminals, 1)
if options[:debug]
  g.outputTable(output, 'SEQ', g.seq, 1)
  g.outputTable(output, 'ALT', g.alt, 1)
end
g.outputTable(output, 'FIRST', g.first, 1)
g.outputTable(output, 'FOLLOW', g.follow, 1)
unless output == STDOUT
  output.puts "end"
end
