#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require "bundler/setup"
require 'rdf/trig'
require 'rdf/isomorphic'
require File.expand_path(File.join(File.dirname(__FILE__), "..", 'spec', 'spec_helper'))
require File.expand_path(File.join(File.dirname(__FILE__), "..", 'spec', 'suite_helper'))
require 'getoptlong'

ASSERTOR = "http://greggkellogg.net/foaf#me"
RUN_TIME = Time.now

def earl_preamble(options)
  options[:output].write File.read(File.expand_path("../../etc/doap#{'-nquads' if options[:nquads]}.ttl", __FILE__))
  options[:output].puts %(
<#{ASSERTOR}> a foaf:Person, earl:Assertor;
  foaf:name "Gregg Kellogg";
  foaf:title "Implementor";
  foaf:homepage <http://greggkellogg.net/> .
)
end

def run_tc(tc, options)
  STDERR.write "run #{tc.name}"

  if options[:verbose]
    puts "\nTestCase: #{tc.inspect}"
    puts "\nInput:\n" + tc.input.read 
    puts "\nExpected:\n" + tc.expected.read
    tc.input.rewind
    tc.expected.rewind
  end

  begin
    puts "open #{tc.action}" if options[:verbose]
    options = {:base_uri => tc.base}.merge(options)

    reader = RDF::Reader.for(tc.action).new(tc.input, :base_uri => tc.base, :validate => true)

    graph = RDF::Repository.new
    result = nil

    if tc.positive_test?
      begin
        graph << reader
      rescue Exception => e
        STDERR.puts "Unexpected exception: #{e.inspect}" if options[:verbose]
        result = "failed"
      end
    else
      begin
        graph << reader
        STDERR.puts "Expected exception" if options[:verbose]
        result = "failed"
      rescue RDF::ReaderError
        result = "passed"
      end
    end

    if tc.evaluate? && result.nil?
      output_graph = RDF::Repository.load(tc.result, :format => :nquads, :base_uri => tc.base)
      result = graph.isomorphic_with?(output_graph) ? "passed" : "failed"
    else
      result ||= "passed"
    end

  rescue Exception => e
    STDERR.puts "#{"exception:" unless options[:quiet]}: #{e}"
    if options[:quiet]
      return
    else
      raise
    end
  end
  
  options[:output].puts("\nOutput:\n" + graph.dump(:ntriples)) unless options[:quiet]

  if options[:earl]
    options[:output].puts %{
[ a earl:Assertion;
  earl:assertedBy <#{ASSERTOR}>;
  earl:subject <http://rubygems.org/gems/rdf#{'-turtle' unless options[:ntriples]}>;
  earl:test <#{tc.id}>;
  earl:result [
    a earl:TestResult;
    earl:outcome earl:#{result};
    dc:date "#{RUN_TIME.xmlschema}"^^xsd:dateTime];
  earl:mode earl:automatic ] .
}
  end

  puts "#{"test result:" unless options[:quiet]} #{result}"
end

options = {
  :output => STDOUT,
}

opts = GetoptLong.new(
  ["--help", "-?", GetoptLong::NO_ARGUMENT],
  ["--dbg", GetoptLong::NO_ARGUMENT],
  ["--earl", GetoptLong::NO_ARGUMENT],
  ["--quiet", "-q", GetoptLong::NO_ARGUMENT],
  ["--nquads", GetoptLong::NO_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--skip-long", "-s", GetoptLong::NO_ARGUMENT],
  ["--validate", GetoptLong::NO_ARGUMENT],
  ["--verbose", "-v", GetoptLong::NO_ARGUMENT]
)

def help(options)
  puts "Usage: #{$0} [options] [test-number ...]"
  puts "Options:"
  puts "      --debug:              Display detailed debug output"
  puts "      --earl:               Generate EARL report"
  puts "      --quiet:              Minimal output"
  puts "      --nquads:             Run N-Quads tests"
  puts "      --output:             Output to specified file"
  puts "      --skip-long:          Avoid files taking too much time"
  puts "      --validate:           Validate input"
  puts "      --verbose:            Verbose processing"
  puts "      --help,-?:            This message"
  exit(0)
end


opts.each do |opt, arg|
  case opt
  when '--help'             then help(options)
  when '--dbg'              then ::RDF::Turtle::debug = true
  when '--earl'             then options[:quiet] = options[:earl] = true
  when '--nquads'           then options[:ntriples] = true
  when '--output'           then options[:output] = File.open(arg, "w")
  when '--quiet'            then options[:quiet] = true
  when '--skip-long'        then options[:skip] = true
  when '--validate'         then options[:validate] = true
  when '--verbose'          then options[:verbose] = true
  end
end

manifest = (options[:nquads] ? Fixtures::SuiteTest::NQBASE : Fixtures::SuiteTest::BASE) + "manifest.ttl"

earl_preamble(options) if options[:earl]

Fixtures::SuiteTest::Manifest.open(manifest) do |m|
  m.entries.each do |tc|
    next unless ARGV.empty? || ARGV.any? {|n| tc.name.match(/#{n}/)}
    run_tc(tc, options)
  end
end
